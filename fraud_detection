"""
* Name:Haozhe Cui
* Date: 2022/8/15
* CSE 160, Summer 2022
"""

# noqa: F401, do not remove if using a Mac
# add your imports BELOW this line
import csv
import matplotlib.pyplot as plt
import random
# Your Set of Functions for this assignment goes in here

# problem 1


def extract_election_votes(filename, column_names):
    '''Extrat the data from file with specific filename with a list
    of column_name in this file.

    Argument:
        filename: The csv file name
        column_name: a list of column name

    Return: a list of integers that contains the values in those
    columns from every row (the order of the integers does not matter)
    '''

    # # make it easy to read lines from a csv file
    with open(filename) as file:
        reader = csv.DictReader(file)
        results = []
        for row in reader:
            for cn in column_names:
                # replace comma and double quotes with empty string
                if 'not' not in row[cn] and row[cn] != "":
                    results.append(int(row[cn].replace(",", "")))
    return results


# problem 2


def ones_and_tens_digit_histogram(numbers):
    '''Find and return a list of 10 numbers that be calcuated to draw
    ones and tens digit histogram.

    Argument:
        numbers: a list of number

    Return: in the returned list, the value at index i is the frequency
    with digit i appeared in the ones place or tens place in the input
    list.
    '''
    # get the tens and ones digits from the original number
    tens_numbers = [number % 100 for number in numbers]
    zero_list = [0 for i in range(10)]

    for unit in tens_numbers:
        tenth_number = int(unit / 10)
        unit_number = int(unit % 10)
        zero_list[tenth_number] += 1
        zero_list[unit_number] += 1

    # Because we use twice sum of counts, to get frequency,
    # we should divided by 2
    output_list = [i / (len(tens_numbers) * 2) for i in zero_list]

    return output_list

# problem 3


def plot_iran_least_digits_histogram(histogram):
    '''Build and return Iranian one_and_tens_digit_histogram and ideal line
    graph

    Argument:
        histogram: histogram data generated by function one_and_tens_digit
        histogram

    Return: Return graph that is the frequencies of the ones and tens digits
    for the Iranian election data.
    '''
    # using plot function and for loop to draw ideal graph.
    plt.plot([0.10 for i in range(10)], label='ideal')
    plt.plot(histogram, label='iran')
    plt.legend(loc='upper left')  # legend position (upper left)
    plt.ylabel('Frequency')  # y label name
    plt.xlabel('Digit')  # x label name
    plt.title('Distribution of the last two digits in Iranian Dataset')
    plt.savefig('iran-digits.png')  # save figure as a file
    plt.show()

# problem 4


def plot_dist_by_sample_size():
    '''creat and show the randome sample graph in the range [10, 50, 100, 1000
     and 10000] to testify the trend compared with Iranian election sample
    graph.
    '''
    plt.plot([0.10 for i in range(10)], label='ideal')
    # create different size of samples
    sizes = [10, 50, 100, 1000, 10000]

    for size in sizes:
        # for each size, we use randint to randomly chose its numbers
        # and use plot function to draw their appearance.
        random_size = [random.randint(0, 99) for i in range(size)]
        random_histogram = ones_and_tens_digit_histogram(random_size)
        plt.plot(random_histogram, label=str(size) + ' random numbers')

    plt.ylabel('Frequency')
    plt.xlabel('Digit')
    plt.legend(loc='upper left')
    plt.title('Distribution of last two digits in randomly generated samples')
    plt.savefig('random-digits.png')
    plt.show()

# problem 5


def mean_squared_error(numbers1, numbers2):
    '''Return the mean squared error between the lists. The MSE is a number
    that determines closeness of the two lines, where the larger the
    number is, the more different the two lines are.

    Argument:
        numbers1 and numbers2: two lists of number.
    '''
    count = 0

    for number in range(len(numbers1)):
        # calculate the square difference between two numbers
        count += ((numbers1[number] - numbers2[number]) ** 2) / len(numbers1)

    return count

# problem 6 part 1


def calculate_mse_with_uniform(histogram):
    '''Find and return the mean squared error of the given histogram with
    the uniform distribution.

    Argument:
        histogram: histogram created by the function
        ones_and_tens_digit_histogram.
    '''
    # get the mse of the given histogram with the uniform distribution.
    uniform_distribution = [0.1 for i in histogram]

    return mean_squared_error(uniform_distribution, histogram)


def compare_fun(the_mse, title_name, number_of_datapoints):

    def random_size():

        return [random.randint(0, 99) for i in
                range(number_of_datapoints)]

    # Build 10000 such groups and calculate the mse with uniform distribution
    mse_samples = [calculate_mse_with_uniform
                   (ones_and_tens_digit_histogram(random_size()))
                   for i in range(10000)]

    # find count of samples greater than iranian mse
    large_counts = sum(1 for i in mse_samples if i >= the_mse)
    # find count of samples smaller than iranian mse
    small_counts = 10000 - large_counts

    print(f'{title_name} election MSE:', the_mse)
    print(f'Quantity of MSEs larger than or equal to the '
          f'{title_name} election MSE:', large_counts)
    print('Quantity of MSEs smaller than the ' f'{title_name} '
          'election MSE:', small_counts)
    print(f'{title_name} election null hypothesis rejection level p:',
          float(large_counts) / 10000)


# problem 6 part 2

def compare_iran_mse_to_samples(iran_mse, number_of_iran_datapoints):
    '''Find and print mean squared error of Iran. Also, this function will
    compares the 10,000 MSEs to the Iranian MSE determmine and printing.
        - how many of the 10,000 random MSEs are larger than or equal to the
          Iran MSE?
        - how many of the 10,000 random MSEs are smaller than the Iran MSE?
        - the Iranian election null hypothesis rejection level?

    Argument:
        iran_mse: computed by calculate_mse_with_uniform()
        number_of_iran_datapoints: the number of data in the Iranian dataset.
    '''
    # get how many datapoint exist to the specific dataset.
    # create inside function to make a set of random numbers betweeen 0<=x<100
    # in the specfic dataset.
    compare_fun(iran_mse, "2009 Iranian", number_of_iran_datapoints)

# problem 8


def compare_us_mse_to_samples(us_mse, number_of_us_datapoints):
    '''Find and print mean squared error of US. Also, this function will
    compares the 10,000 MSEs to the US MSE determmine and printing.
        - how many of the 10,000 random MSEs are larger than or equal to the
          US MSE?
        - how many of the 10,000 random MSEs are smaller than the US MSE?
        - the US election null hypothesis rejection level?

     Argument:
        us_mse: computed by calculate_mse_with_uniform()
        number_of_us_datapoints: the number of data in the US dataset.
    '''

    compare_fun(us_mse, "2008 United States", number_of_us_datapoints)


def main():
    # Code that calls functions you have written above
    # e.g. extract_election_vote_counts() etc.
    # This code should produce the output expected from your program.
    iranian_counts = extract_election_votes(
                     "election-iran-2009.csv",
                     ["Ahmadinejad", "Rezai", "Karrubi", "Mousavi"])

    histogram_iranian = ones_and_tens_digit_histogram(iranian_counts)

    iranian_mse_with_uniform = calculate_mse_with_uniform(histogram_iranian)
    number_of_iran_data = len(iranian_counts)

    plot_iran_least_digits_histogram(histogram_iranian)

    plot_dist_by_sample_size()

    compare_iran_mse_to_samples(iranian_mse_with_uniform, number_of_iran_data)

    us_counts = extract_election_votes(
                 "election-us-2008.csv",
                 ["Obama", "McCain", "Nader", "Barr", "Baldwin", "McKinney"]
    )

    histogram_us = ones_and_tens_digit_histogram(us_counts)
    us_mes_with_uniform = calculate_mse_with_uniform(histogram_us)
    number_of_us_data = len(us_counts)
    print()

    compare_us_mse_to_samples(us_mes_with_uniform, number_of_us_data)


if __name__ == "__main__":
    main()
